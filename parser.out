Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    ID
    FINDELINEA

Grammar

Rule 0     S' -> programa
Rule 1     programa -> JUGAR instruccion DORMIR eof
Rule 2     eof -> <empty>
Rule 3     instruccion -> instruccion asignacion
Rule 4     instruccion -> instruccion aritmetica
Rule 5     instruccion -> instruccion condicional
Rule 6     instruccion -> instruccion ESCRIBIR
Rule 7     instruccion -> empty
Rule 8     asignacion -> VARIABLE ASIG dato
Rule 9     aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD
Rule 10    condicional -> if
Rule 11    condicional -> while
Rule 12    condicional -> for
Rule 13    aritExtra -> aritExtra operador dato
Rule 14    aritExtra -> empty
Rule 15    operador -> SUMA
Rule 16    operador -> RESTA
Rule 17    operador -> MULT
Rule 18    operador -> DIV
Rule 19    if -> SI requisito ENTONCES PRI instruccion PRD
Rule 20    requisito -> VARIABLE condicion posibilidad
Rule 21    posibilidad -> dato
Rule 22    posibilidad -> VERDAD
Rule 23    posibilidad -> MENTIRA
Rule 24    condicion -> MAYQ
Rule 25    condicion -> MENQ
Rule 26    condicion -> IGUAL
Rule 27    condicion -> MAYIGUAL
Rule 28    condicion -> MENIGUAL
Rule 29    condicion -> DIFERENTE
Rule 30    for -> DAR dato VUELTAS PRI instruccion PRD
Rule 31    while -> HAGA PRI instruccion PRD MIENTRAS requisito
Rule 32    dato -> LETRA
Rule 33    dato -> NUM
Rule 34    dato -> VARIABLE
Rule 35    empty -> <empty>

Terminals, with rules where they appear

ASIG                 : 8 9
DAR                  : 30
DIFERENTE            : 29
DIV                  : 18
DORMIR               : 1
ENTONCES             : 19
ESCRIBIR             : 6
FINDELINEA           : 
HAGA                 : 31
ID                   : 
IGUAL                : 26
JUGAR                : 1
LETRA                : 32
MAYIGUAL             : 27
MAYQ                 : 24
MENIGUAL             : 28
MENQ                 : 25
MENTIRA              : 23
MIENTRAS             : 31
MULT                 : 17
NUM                  : 33
PRD                  : 9 19 30 31
PRI                  : 9 19 30 31
RESTA                : 16
SI                   : 19
SUMA                 : 15
VARIABLE             : 8 9 20 34
VERDAD               : 22
VUELTAS              : 30
error                : 

Nonterminals, with rules where they appear

aritExtra            : 9 13
aritmetica           : 4
asignacion           : 3
condicion            : 20
condicional          : 5
dato                 : 8 9 13 21 30
empty                : 7 14
eof                  : 1
for                  : 12
if                   : 10
instruccion          : 1 3 4 5 6 19 30 31
operador             : 13
posibilidad          : 20
programa             : 0
requisito            : 19 31
while                : 11

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . JUGAR instruccion DORMIR eof

    JUGAR           shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> JUGAR . instruccion DORMIR eof
    (3) instruccion -> . instruccion asignacion
    (4) instruccion -> . instruccion aritmetica
    (5) instruccion -> . instruccion condicional
    (6) instruccion -> . instruccion ESCRIBIR
    (7) instruccion -> . empty
    (35) empty -> .

    DORMIR          reduce using rule 35 (empty -> .)
    ESCRIBIR        reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    SI              reduce using rule 35 (empty -> .)
    HAGA            reduce using rule 35 (empty -> .)
    DAR             reduce using rule 35 (empty -> .)

    instruccion                    shift and go to state 3
    empty                          shift and go to state 4

state 3

    (1) programa -> JUGAR instruccion . DORMIR eof
    (3) instruccion -> instruccion . asignacion
    (4) instruccion -> instruccion . aritmetica
    (5) instruccion -> instruccion . condicional
    (6) instruccion -> instruccion . ESCRIBIR
    (8) asignacion -> . VARIABLE ASIG dato
    (9) aritmetica -> . VARIABLE ASIG PRI dato aritExtra PRD
    (10) condicional -> . if
    (11) condicional -> . while
    (12) condicional -> . for
    (19) if -> . SI requisito ENTONCES PRI instruccion PRD
    (31) while -> . HAGA PRI instruccion PRD MIENTRAS requisito
    (30) for -> . DAR dato VUELTAS PRI instruccion PRD

    DORMIR          shift and go to state 5
    ESCRIBIR        shift and go to state 8
    VARIABLE        shift and go to state 14
    SI              shift and go to state 9
    HAGA            shift and go to state 12
    DAR             shift and go to state 11

    asignacion                     shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 7
    aritmetica                     shift and go to state 10
    if                             shift and go to state 6
    condicional                    shift and go to state 13

state 4

    (7) instruccion -> empty .

    PRD             reduce using rule 7 (instruccion -> empty .)
    ESCRIBIR        reduce using rule 7 (instruccion -> empty .)
    VARIABLE        reduce using rule 7 (instruccion -> empty .)
    SI              reduce using rule 7 (instruccion -> empty .)
    HAGA            reduce using rule 7 (instruccion -> empty .)
    DAR             reduce using rule 7 (instruccion -> empty .)
    DORMIR          reduce using rule 7 (instruccion -> empty .)


state 5

    (1) programa -> JUGAR instruccion DORMIR . eof
    (2) eof -> .

    $end            reduce using rule 2 (eof -> .)

    eof                            shift and go to state 17

state 6

    (10) condicional -> if .

    PRD             reduce using rule 10 (condicional -> if .)
    ESCRIBIR        reduce using rule 10 (condicional -> if .)
    VARIABLE        reduce using rule 10 (condicional -> if .)
    SI              reduce using rule 10 (condicional -> if .)
    HAGA            reduce using rule 10 (condicional -> if .)
    DAR             reduce using rule 10 (condicional -> if .)
    DORMIR          reduce using rule 10 (condicional -> if .)


state 7

    (12) condicional -> for .

    PRD             reduce using rule 12 (condicional -> for .)
    ESCRIBIR        reduce using rule 12 (condicional -> for .)
    VARIABLE        reduce using rule 12 (condicional -> for .)
    SI              reduce using rule 12 (condicional -> for .)
    HAGA            reduce using rule 12 (condicional -> for .)
    DAR             reduce using rule 12 (condicional -> for .)
    DORMIR          reduce using rule 12 (condicional -> for .)


state 8

    (6) instruccion -> instruccion ESCRIBIR .

    PRD             reduce using rule 6 (instruccion -> instruccion ESCRIBIR .)
    ESCRIBIR        reduce using rule 6 (instruccion -> instruccion ESCRIBIR .)
    VARIABLE        reduce using rule 6 (instruccion -> instruccion ESCRIBIR .)
    SI              reduce using rule 6 (instruccion -> instruccion ESCRIBIR .)
    HAGA            reduce using rule 6 (instruccion -> instruccion ESCRIBIR .)
    DAR             reduce using rule 6 (instruccion -> instruccion ESCRIBIR .)
    DORMIR          reduce using rule 6 (instruccion -> instruccion ESCRIBIR .)


state 9

    (19) if -> SI . requisito ENTONCES PRI instruccion PRD
    (20) requisito -> . VARIABLE condicion posibilidad

    VARIABLE        shift and go to state 19

    requisito                      shift and go to state 18

state 10

    (4) instruccion -> instruccion aritmetica .

    PRD             reduce using rule 4 (instruccion -> instruccion aritmetica .)
    ESCRIBIR        reduce using rule 4 (instruccion -> instruccion aritmetica .)
    VARIABLE        reduce using rule 4 (instruccion -> instruccion aritmetica .)
    SI              reduce using rule 4 (instruccion -> instruccion aritmetica .)
    HAGA            reduce using rule 4 (instruccion -> instruccion aritmetica .)
    DAR             reduce using rule 4 (instruccion -> instruccion aritmetica .)
    DORMIR          reduce using rule 4 (instruccion -> instruccion aritmetica .)


state 11

    (30) for -> DAR . dato VUELTAS PRI instruccion PRD
    (32) dato -> . LETRA
    (33) dato -> . NUM
    (34) dato -> . VARIABLE

    LETRA           shift and go to state 23
    NUM             shift and go to state 21
    VARIABLE        shift and go to state 22

    dato                           shift and go to state 20

state 12

    (31) while -> HAGA . PRI instruccion PRD MIENTRAS requisito

    PRI             shift and go to state 24


state 13

    (5) instruccion -> instruccion condicional .

    PRD             reduce using rule 5 (instruccion -> instruccion condicional .)
    ESCRIBIR        reduce using rule 5 (instruccion -> instruccion condicional .)
    VARIABLE        reduce using rule 5 (instruccion -> instruccion condicional .)
    SI              reduce using rule 5 (instruccion -> instruccion condicional .)
    HAGA            reduce using rule 5 (instruccion -> instruccion condicional .)
    DAR             reduce using rule 5 (instruccion -> instruccion condicional .)
    DORMIR          reduce using rule 5 (instruccion -> instruccion condicional .)


state 14

    (8) asignacion -> VARIABLE . ASIG dato
    (9) aritmetica -> VARIABLE . ASIG PRI dato aritExtra PRD

    ASIG            shift and go to state 25


state 15

    (3) instruccion -> instruccion asignacion .

    PRD             reduce using rule 3 (instruccion -> instruccion asignacion .)
    ESCRIBIR        reduce using rule 3 (instruccion -> instruccion asignacion .)
    VARIABLE        reduce using rule 3 (instruccion -> instruccion asignacion .)
    SI              reduce using rule 3 (instruccion -> instruccion asignacion .)
    HAGA            reduce using rule 3 (instruccion -> instruccion asignacion .)
    DAR             reduce using rule 3 (instruccion -> instruccion asignacion .)
    DORMIR          reduce using rule 3 (instruccion -> instruccion asignacion .)


state 16

    (11) condicional -> while .

    PRD             reduce using rule 11 (condicional -> while .)
    ESCRIBIR        reduce using rule 11 (condicional -> while .)
    VARIABLE        reduce using rule 11 (condicional -> while .)
    SI              reduce using rule 11 (condicional -> while .)
    HAGA            reduce using rule 11 (condicional -> while .)
    DAR             reduce using rule 11 (condicional -> while .)
    DORMIR          reduce using rule 11 (condicional -> while .)


state 17

    (1) programa -> JUGAR instruccion DORMIR eof .

    $end            reduce using rule 1 (programa -> JUGAR instruccion DORMIR eof .)


state 18

    (19) if -> SI requisito . ENTONCES PRI instruccion PRD

    ENTONCES        shift and go to state 26


state 19

    (20) requisito -> VARIABLE . condicion posibilidad
    (24) condicion -> . MAYQ
    (25) condicion -> . MENQ
    (26) condicion -> . IGUAL
    (27) condicion -> . MAYIGUAL
    (28) condicion -> . MENIGUAL
    (29) condicion -> . DIFERENTE

    MAYQ            shift and go to state 32
    MENQ            shift and go to state 28
    IGUAL           shift and go to state 29
    MAYIGUAL        shift and go to state 33
    MENIGUAL        shift and go to state 27
    DIFERENTE       shift and go to state 30

    condicion                      shift and go to state 31

state 20

    (30) for -> DAR dato . VUELTAS PRI instruccion PRD

    VUELTAS         shift and go to state 34


state 21

    (33) dato -> NUM .

    DORMIR          reduce using rule 33 (dato -> NUM .)
    ESCRIBIR        reduce using rule 33 (dato -> NUM .)
    VARIABLE        reduce using rule 33 (dato -> NUM .)
    SI              reduce using rule 33 (dato -> NUM .)
    HAGA            reduce using rule 33 (dato -> NUM .)
    DAR             reduce using rule 33 (dato -> NUM .)
    PRD             reduce using rule 33 (dato -> NUM .)
    SUMA            reduce using rule 33 (dato -> NUM .)
    RESTA           reduce using rule 33 (dato -> NUM .)
    MULT            reduce using rule 33 (dato -> NUM .)
    DIV             reduce using rule 33 (dato -> NUM .)
    ENTONCES        reduce using rule 33 (dato -> NUM .)
    VUELTAS         reduce using rule 33 (dato -> NUM .)


state 22

    (34) dato -> VARIABLE .

    DORMIR          reduce using rule 34 (dato -> VARIABLE .)
    ESCRIBIR        reduce using rule 34 (dato -> VARIABLE .)
    VARIABLE        reduce using rule 34 (dato -> VARIABLE .)
    SI              reduce using rule 34 (dato -> VARIABLE .)
    HAGA            reduce using rule 34 (dato -> VARIABLE .)
    DAR             reduce using rule 34 (dato -> VARIABLE .)
    PRD             reduce using rule 34 (dato -> VARIABLE .)
    SUMA            reduce using rule 34 (dato -> VARIABLE .)
    RESTA           reduce using rule 34 (dato -> VARIABLE .)
    MULT            reduce using rule 34 (dato -> VARIABLE .)
    DIV             reduce using rule 34 (dato -> VARIABLE .)
    ENTONCES        reduce using rule 34 (dato -> VARIABLE .)
    VUELTAS         reduce using rule 34 (dato -> VARIABLE .)


state 23

    (32) dato -> LETRA .

    DORMIR          reduce using rule 32 (dato -> LETRA .)
    ESCRIBIR        reduce using rule 32 (dato -> LETRA .)
    VARIABLE        reduce using rule 32 (dato -> LETRA .)
    SI              reduce using rule 32 (dato -> LETRA .)
    HAGA            reduce using rule 32 (dato -> LETRA .)
    DAR             reduce using rule 32 (dato -> LETRA .)
    PRD             reduce using rule 32 (dato -> LETRA .)
    SUMA            reduce using rule 32 (dato -> LETRA .)
    RESTA           reduce using rule 32 (dato -> LETRA .)
    MULT            reduce using rule 32 (dato -> LETRA .)
    DIV             reduce using rule 32 (dato -> LETRA .)
    ENTONCES        reduce using rule 32 (dato -> LETRA .)
    VUELTAS         reduce using rule 32 (dato -> LETRA .)


state 24

    (31) while -> HAGA PRI . instruccion PRD MIENTRAS requisito
    (3) instruccion -> . instruccion asignacion
    (4) instruccion -> . instruccion aritmetica
    (5) instruccion -> . instruccion condicional
    (6) instruccion -> . instruccion ESCRIBIR
    (7) instruccion -> . empty
    (35) empty -> .

    PRD             reduce using rule 35 (empty -> .)
    ESCRIBIR        reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    SI              reduce using rule 35 (empty -> .)
    HAGA            reduce using rule 35 (empty -> .)
    DAR             reduce using rule 35 (empty -> .)

    instruccion                    shift and go to state 35
    empty                          shift and go to state 4

state 25

    (8) asignacion -> VARIABLE ASIG . dato
    (9) aritmetica -> VARIABLE ASIG . PRI dato aritExtra PRD
    (32) dato -> . LETRA
    (33) dato -> . NUM
    (34) dato -> . VARIABLE

    PRI             shift and go to state 36
    LETRA           shift and go to state 23
    NUM             shift and go to state 21
    VARIABLE        shift and go to state 22

    dato                           shift and go to state 37

state 26

    (19) if -> SI requisito ENTONCES . PRI instruccion PRD

    PRI             shift and go to state 38


state 27

    (28) condicion -> MENIGUAL .

    VERDAD          reduce using rule 28 (condicion -> MENIGUAL .)
    MENTIRA         reduce using rule 28 (condicion -> MENIGUAL .)
    LETRA           reduce using rule 28 (condicion -> MENIGUAL .)
    NUM             reduce using rule 28 (condicion -> MENIGUAL .)
    VARIABLE        reduce using rule 28 (condicion -> MENIGUAL .)


state 28

    (25) condicion -> MENQ .

    VERDAD          reduce using rule 25 (condicion -> MENQ .)
    MENTIRA         reduce using rule 25 (condicion -> MENQ .)
    LETRA           reduce using rule 25 (condicion -> MENQ .)
    NUM             reduce using rule 25 (condicion -> MENQ .)
    VARIABLE        reduce using rule 25 (condicion -> MENQ .)


state 29

    (26) condicion -> IGUAL .

    VERDAD          reduce using rule 26 (condicion -> IGUAL .)
    MENTIRA         reduce using rule 26 (condicion -> IGUAL .)
    LETRA           reduce using rule 26 (condicion -> IGUAL .)
    NUM             reduce using rule 26 (condicion -> IGUAL .)
    VARIABLE        reduce using rule 26 (condicion -> IGUAL .)


state 30

    (29) condicion -> DIFERENTE .

    VERDAD          reduce using rule 29 (condicion -> DIFERENTE .)
    MENTIRA         reduce using rule 29 (condicion -> DIFERENTE .)
    LETRA           reduce using rule 29 (condicion -> DIFERENTE .)
    NUM             reduce using rule 29 (condicion -> DIFERENTE .)
    VARIABLE        reduce using rule 29 (condicion -> DIFERENTE .)


state 31

    (20) requisito -> VARIABLE condicion . posibilidad
    (21) posibilidad -> . dato
    (22) posibilidad -> . VERDAD
    (23) posibilidad -> . MENTIRA
    (32) dato -> . LETRA
    (33) dato -> . NUM
    (34) dato -> . VARIABLE

    VERDAD          shift and go to state 40
    MENTIRA         shift and go to state 41
    LETRA           shift and go to state 23
    NUM             shift and go to state 21
    VARIABLE        shift and go to state 22

    dato                           shift and go to state 39
    posibilidad                    shift and go to state 42

state 32

    (24) condicion -> MAYQ .

    VERDAD          reduce using rule 24 (condicion -> MAYQ .)
    MENTIRA         reduce using rule 24 (condicion -> MAYQ .)
    LETRA           reduce using rule 24 (condicion -> MAYQ .)
    NUM             reduce using rule 24 (condicion -> MAYQ .)
    VARIABLE        reduce using rule 24 (condicion -> MAYQ .)


state 33

    (27) condicion -> MAYIGUAL .

    VERDAD          reduce using rule 27 (condicion -> MAYIGUAL .)
    MENTIRA         reduce using rule 27 (condicion -> MAYIGUAL .)
    LETRA           reduce using rule 27 (condicion -> MAYIGUAL .)
    NUM             reduce using rule 27 (condicion -> MAYIGUAL .)
    VARIABLE        reduce using rule 27 (condicion -> MAYIGUAL .)


state 34

    (30) for -> DAR dato VUELTAS . PRI instruccion PRD

    PRI             shift and go to state 43


state 35

    (31) while -> HAGA PRI instruccion . PRD MIENTRAS requisito
    (3) instruccion -> instruccion . asignacion
    (4) instruccion -> instruccion . aritmetica
    (5) instruccion -> instruccion . condicional
    (6) instruccion -> instruccion . ESCRIBIR
    (8) asignacion -> . VARIABLE ASIG dato
    (9) aritmetica -> . VARIABLE ASIG PRI dato aritExtra PRD
    (10) condicional -> . if
    (11) condicional -> . while
    (12) condicional -> . for
    (19) if -> . SI requisito ENTONCES PRI instruccion PRD
    (31) while -> . HAGA PRI instruccion PRD MIENTRAS requisito
    (30) for -> . DAR dato VUELTAS PRI instruccion PRD

    PRD             shift and go to state 44
    ESCRIBIR        shift and go to state 8
    VARIABLE        shift and go to state 14
    SI              shift and go to state 9
    HAGA            shift and go to state 12
    DAR             shift and go to state 11

    asignacion                     shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 7
    aritmetica                     shift and go to state 10
    condicional                    shift and go to state 13
    if                             shift and go to state 6

state 36

    (9) aritmetica -> VARIABLE ASIG PRI . dato aritExtra PRD
    (32) dato -> . LETRA
    (33) dato -> . NUM
    (34) dato -> . VARIABLE

    LETRA           shift and go to state 23
    NUM             shift and go to state 21
    VARIABLE        shift and go to state 22

    dato                           shift and go to state 45

state 37

    (8) asignacion -> VARIABLE ASIG dato .

    PRD             reduce using rule 8 (asignacion -> VARIABLE ASIG dato .)
    ESCRIBIR        reduce using rule 8 (asignacion -> VARIABLE ASIG dato .)
    VARIABLE        reduce using rule 8 (asignacion -> VARIABLE ASIG dato .)
    SI              reduce using rule 8 (asignacion -> VARIABLE ASIG dato .)
    HAGA            reduce using rule 8 (asignacion -> VARIABLE ASIG dato .)
    DAR             reduce using rule 8 (asignacion -> VARIABLE ASIG dato .)
    DORMIR          reduce using rule 8 (asignacion -> VARIABLE ASIG dato .)


state 38

    (19) if -> SI requisito ENTONCES PRI . instruccion PRD
    (3) instruccion -> . instruccion asignacion
    (4) instruccion -> . instruccion aritmetica
    (5) instruccion -> . instruccion condicional
    (6) instruccion -> . instruccion ESCRIBIR
    (7) instruccion -> . empty
    (35) empty -> .

    PRD             reduce using rule 35 (empty -> .)
    ESCRIBIR        reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    SI              reduce using rule 35 (empty -> .)
    HAGA            reduce using rule 35 (empty -> .)
    DAR             reduce using rule 35 (empty -> .)

    instruccion                    shift and go to state 46
    empty                          shift and go to state 4

state 39

    (21) posibilidad -> dato .

    ENTONCES        reduce using rule 21 (posibilidad -> dato .)
    DORMIR          reduce using rule 21 (posibilidad -> dato .)
    ESCRIBIR        reduce using rule 21 (posibilidad -> dato .)
    VARIABLE        reduce using rule 21 (posibilidad -> dato .)
    SI              reduce using rule 21 (posibilidad -> dato .)
    HAGA            reduce using rule 21 (posibilidad -> dato .)
    DAR             reduce using rule 21 (posibilidad -> dato .)
    PRD             reduce using rule 21 (posibilidad -> dato .)


state 40

    (22) posibilidad -> VERDAD .

    ENTONCES        reduce using rule 22 (posibilidad -> VERDAD .)
    DORMIR          reduce using rule 22 (posibilidad -> VERDAD .)
    ESCRIBIR        reduce using rule 22 (posibilidad -> VERDAD .)
    VARIABLE        reduce using rule 22 (posibilidad -> VERDAD .)
    SI              reduce using rule 22 (posibilidad -> VERDAD .)
    HAGA            reduce using rule 22 (posibilidad -> VERDAD .)
    DAR             reduce using rule 22 (posibilidad -> VERDAD .)
    PRD             reduce using rule 22 (posibilidad -> VERDAD .)


state 41

    (23) posibilidad -> MENTIRA .

    ENTONCES        reduce using rule 23 (posibilidad -> MENTIRA .)
    DORMIR          reduce using rule 23 (posibilidad -> MENTIRA .)
    ESCRIBIR        reduce using rule 23 (posibilidad -> MENTIRA .)
    VARIABLE        reduce using rule 23 (posibilidad -> MENTIRA .)
    SI              reduce using rule 23 (posibilidad -> MENTIRA .)
    HAGA            reduce using rule 23 (posibilidad -> MENTIRA .)
    DAR             reduce using rule 23 (posibilidad -> MENTIRA .)
    PRD             reduce using rule 23 (posibilidad -> MENTIRA .)


state 42

    (20) requisito -> VARIABLE condicion posibilidad .

    ENTONCES        reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)
    DORMIR          reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)
    ESCRIBIR        reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)
    VARIABLE        reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)
    SI              reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)
    HAGA            reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)
    DAR             reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)
    PRD             reduce using rule 20 (requisito -> VARIABLE condicion posibilidad .)


state 43

    (30) for -> DAR dato VUELTAS PRI . instruccion PRD
    (3) instruccion -> . instruccion asignacion
    (4) instruccion -> . instruccion aritmetica
    (5) instruccion -> . instruccion condicional
    (6) instruccion -> . instruccion ESCRIBIR
    (7) instruccion -> . empty
    (35) empty -> .

    PRD             reduce using rule 35 (empty -> .)
    ESCRIBIR        reduce using rule 35 (empty -> .)
    VARIABLE        reduce using rule 35 (empty -> .)
    SI              reduce using rule 35 (empty -> .)
    HAGA            reduce using rule 35 (empty -> .)
    DAR             reduce using rule 35 (empty -> .)

    instruccion                    shift and go to state 47
    empty                          shift and go to state 4

state 44

    (31) while -> HAGA PRI instruccion PRD . MIENTRAS requisito

    MIENTRAS        shift and go to state 48


state 45

    (9) aritmetica -> VARIABLE ASIG PRI dato . aritExtra PRD
    (13) aritExtra -> . aritExtra operador dato
    (14) aritExtra -> . empty
    (35) empty -> .

    PRD             reduce using rule 35 (empty -> .)
    SUMA            reduce using rule 35 (empty -> .)
    RESTA           reduce using rule 35 (empty -> .)
    MULT            reduce using rule 35 (empty -> .)
    DIV             reduce using rule 35 (empty -> .)

    aritExtra                      shift and go to state 49
    empty                          shift and go to state 50

state 46

    (19) if -> SI requisito ENTONCES PRI instruccion . PRD
    (3) instruccion -> instruccion . asignacion
    (4) instruccion -> instruccion . aritmetica
    (5) instruccion -> instruccion . condicional
    (6) instruccion -> instruccion . ESCRIBIR
    (8) asignacion -> . VARIABLE ASIG dato
    (9) aritmetica -> . VARIABLE ASIG PRI dato aritExtra PRD
    (10) condicional -> . if
    (11) condicional -> . while
    (12) condicional -> . for
    (19) if -> . SI requisito ENTONCES PRI instruccion PRD
    (31) while -> . HAGA PRI instruccion PRD MIENTRAS requisito
    (30) for -> . DAR dato VUELTAS PRI instruccion PRD

    PRD             shift and go to state 51
    ESCRIBIR        shift and go to state 8
    VARIABLE        shift and go to state 14
    SI              shift and go to state 9
    HAGA            shift and go to state 12
    DAR             shift and go to state 11

    asignacion                     shift and go to state 15
    while                          shift and go to state 16
    for                            shift and go to state 7
    aritmetica                     shift and go to state 10
    condicional                    shift and go to state 13
    if                             shift and go to state 6

state 47

    (30) for -> DAR dato VUELTAS PRI instruccion . PRD
    (3) instruccion -> instruccion . asignacion
    (4) instruccion -> instruccion . aritmetica
    (5) instruccion -> instruccion . condicional
    (6) instruccion -> instruccion . ESCRIBIR
    (8) asignacion -> . VARIABLE ASIG dato
    (9) aritmetica -> . VARIABLE ASIG PRI dato aritExtra PRD
    (10) condicional -> . if
    (11) condicional -> . while
    (12) condicional -> . for
    (19) if -> . SI requisito ENTONCES PRI instruccion PRD
    (31) while -> . HAGA PRI instruccion PRD MIENTRAS requisito
    (30) for -> . DAR dato VUELTAS PRI instruccion PRD

    PRD             shift and go to state 52
    ESCRIBIR        shift and go to state 8
    VARIABLE        shift and go to state 14
    SI              shift and go to state 9
    HAGA            shift and go to state 12
    DAR             shift and go to state 11

    asignacion                     shift and go to state 15
    condicional                    shift and go to state 13
    while                          shift and go to state 16
    for                            shift and go to state 7
    aritmetica                     shift and go to state 10
    if                             shift and go to state 6

state 48

    (31) while -> HAGA PRI instruccion PRD MIENTRAS . requisito
    (20) requisito -> . VARIABLE condicion posibilidad

    VARIABLE        shift and go to state 19

    requisito                      shift and go to state 53

state 49

    (9) aritmetica -> VARIABLE ASIG PRI dato aritExtra . PRD
    (13) aritExtra -> aritExtra . operador dato
    (15) operador -> . SUMA
    (16) operador -> . RESTA
    (17) operador -> . MULT
    (18) operador -> . DIV

    PRD             shift and go to state 54
    SUMA            shift and go to state 59
    RESTA           shift and go to state 57
    MULT            shift and go to state 56
    DIV             shift and go to state 58

    operador                       shift and go to state 55

state 50

    (14) aritExtra -> empty .

    PRD             reduce using rule 14 (aritExtra -> empty .)
    SUMA            reduce using rule 14 (aritExtra -> empty .)
    RESTA           reduce using rule 14 (aritExtra -> empty .)
    MULT            reduce using rule 14 (aritExtra -> empty .)
    DIV             reduce using rule 14 (aritExtra -> empty .)


state 51

    (19) if -> SI requisito ENTONCES PRI instruccion PRD .

    PRD             reduce using rule 19 (if -> SI requisito ENTONCES PRI instruccion PRD .)
    ESCRIBIR        reduce using rule 19 (if -> SI requisito ENTONCES PRI instruccion PRD .)
    VARIABLE        reduce using rule 19 (if -> SI requisito ENTONCES PRI instruccion PRD .)
    SI              reduce using rule 19 (if -> SI requisito ENTONCES PRI instruccion PRD .)
    HAGA            reduce using rule 19 (if -> SI requisito ENTONCES PRI instruccion PRD .)
    DAR             reduce using rule 19 (if -> SI requisito ENTONCES PRI instruccion PRD .)
    DORMIR          reduce using rule 19 (if -> SI requisito ENTONCES PRI instruccion PRD .)


state 52

    (30) for -> DAR dato VUELTAS PRI instruccion PRD .

    DORMIR          reduce using rule 30 (for -> DAR dato VUELTAS PRI instruccion PRD .)
    ESCRIBIR        reduce using rule 30 (for -> DAR dato VUELTAS PRI instruccion PRD .)
    VARIABLE        reduce using rule 30 (for -> DAR dato VUELTAS PRI instruccion PRD .)
    SI              reduce using rule 30 (for -> DAR dato VUELTAS PRI instruccion PRD .)
    HAGA            reduce using rule 30 (for -> DAR dato VUELTAS PRI instruccion PRD .)
    DAR             reduce using rule 30 (for -> DAR dato VUELTAS PRI instruccion PRD .)
    PRD             reduce using rule 30 (for -> DAR dato VUELTAS PRI instruccion PRD .)


state 53

    (31) while -> HAGA PRI instruccion PRD MIENTRAS requisito .

    PRD             reduce using rule 31 (while -> HAGA PRI instruccion PRD MIENTRAS requisito .)
    ESCRIBIR        reduce using rule 31 (while -> HAGA PRI instruccion PRD MIENTRAS requisito .)
    VARIABLE        reduce using rule 31 (while -> HAGA PRI instruccion PRD MIENTRAS requisito .)
    SI              reduce using rule 31 (while -> HAGA PRI instruccion PRD MIENTRAS requisito .)
    HAGA            reduce using rule 31 (while -> HAGA PRI instruccion PRD MIENTRAS requisito .)
    DAR             reduce using rule 31 (while -> HAGA PRI instruccion PRD MIENTRAS requisito .)
    DORMIR          reduce using rule 31 (while -> HAGA PRI instruccion PRD MIENTRAS requisito .)


state 54

    (9) aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .

    PRD             reduce using rule 9 (aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .)
    ESCRIBIR        reduce using rule 9 (aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .)
    VARIABLE        reduce using rule 9 (aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .)
    SI              reduce using rule 9 (aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .)
    HAGA            reduce using rule 9 (aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .)
    DAR             reduce using rule 9 (aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .)
    DORMIR          reduce using rule 9 (aritmetica -> VARIABLE ASIG PRI dato aritExtra PRD .)


state 55

    (13) aritExtra -> aritExtra operador . dato
    (32) dato -> . LETRA
    (33) dato -> . NUM
    (34) dato -> . VARIABLE

    LETRA           shift and go to state 23
    NUM             shift and go to state 21
    VARIABLE        shift and go to state 22

    dato                           shift and go to state 60

state 56

    (17) operador -> MULT .

    LETRA           reduce using rule 17 (operador -> MULT .)
    NUM             reduce using rule 17 (operador -> MULT .)
    VARIABLE        reduce using rule 17 (operador -> MULT .)


state 57

    (16) operador -> RESTA .

    LETRA           reduce using rule 16 (operador -> RESTA .)
    NUM             reduce using rule 16 (operador -> RESTA .)
    VARIABLE        reduce using rule 16 (operador -> RESTA .)


state 58

    (18) operador -> DIV .

    LETRA           reduce using rule 18 (operador -> DIV .)
    NUM             reduce using rule 18 (operador -> DIV .)
    VARIABLE        reduce using rule 18 (operador -> DIV .)


state 59

    (15) operador -> SUMA .

    LETRA           reduce using rule 15 (operador -> SUMA .)
    NUM             reduce using rule 15 (operador -> SUMA .)
    VARIABLE        reduce using rule 15 (operador -> SUMA .)


state 60

    (13) aritExtra -> aritExtra operador dato .

    PRD             reduce using rule 13 (aritExtra -> aritExtra operador dato .)
    SUMA            reduce using rule 13 (aritExtra -> aritExtra operador dato .)
    RESTA           reduce using rule 13 (aritExtra -> aritExtra operador dato .)
    MULT            reduce using rule 13 (aritExtra -> aritExtra operador dato .)
    DIV             reduce using rule 13 (aritExtra -> aritExtra operador dato .)

